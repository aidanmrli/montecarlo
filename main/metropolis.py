import numpy as np
import matplotlib.pyplot as plt
from typing import Optional, Callable

class MHAlgorithm:
    """General purpose Metropolis-Hastings algorithm interface for sampling from a target distribution.

    This class is designed to be subclassed to implement specific calculations for the acceptance probability.
    The step method must be implemented in the subclass.
    
    The chain attribute stores the Markov chain of samples generated by the algorithm.
    The current state of the algorithm is the last element of the chain.
    """
    def __init__(self, dim, var, target_dist: Callable = None, symmetric=True):
        self.dim = dim
        self.var = var
        self.target_dist = target_dist
        self.chain = [np.random.multivariate_normal(np.zeros(self.dim), np.eye(self.dim))]
        self.symmetric = symmetric
        self.num_acceptances = 0    # use this to calculate acceptance rate
        self.acceptance_rate = 0

    def reset(self):
        """Reset the Markov chain to the initial state."""
        self.chain = [np.random.multivariate_normal(np.zeros(self.dim), np.eye(self.dim))]

    def step(self):
        """Take a step using the Metropolis-Hastings algorithm. Must be implemented in subclass."""
        raise NotImplementedError("Step method must be implemented in subclass")

